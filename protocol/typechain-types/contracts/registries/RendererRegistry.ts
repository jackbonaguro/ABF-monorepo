/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../../common';

export interface RendererRegistryInterface extends utils.Interface {
  functions: {
    'addressToId(address)': FunctionFragment;
    'idIndex()': FunctionFragment;
    'idToAddress(uint256)': FunctionFragment;
    'registerRenderer(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addressToId'
      | 'idIndex'
      | 'idToAddress'
      | 'registerRenderer',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addressToId', values: [string]): string;
  encodeFunctionData(functionFragment: 'idIndex', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'idToAddress',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerRenderer',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'addressToId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'idIndex', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'idToAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerRenderer',
    data: BytesLike,
  ): Result;

  events: {
    'RegisteredRenderer(uint256,address,uint256,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RegisteredRenderer'): EventFragment;
}

export interface RegisteredRendererEventObject {
  id: BigNumber;
  renderer: string;
  outSize: BigNumber;
  additionalMetadataURI: string;
}
export type RegisteredRendererEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  RegisteredRendererEventObject
>;

export type RegisteredRendererEventFilter =
  TypedEventFilter<RegisteredRendererEvent>;

export interface RendererRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RendererRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressToId(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    idIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    idToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    registerRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addressToId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  idIndex(overrides?: CallOverrides): Promise<BigNumber>;

  idToAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  registerRenderer(
    _renderer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addressToId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    idIndex(overrides?: CallOverrides): Promise<BigNumber>;

    idToAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    registerRenderer(
      _renderer: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'RegisteredRenderer(uint256,address,uint256,string)'(
      id?: null,
      renderer?: null,
      outSize?: null,
      additionalMetadataURI?: null,
    ): RegisteredRendererEventFilter;
    RegisteredRenderer(
      id?: null,
      renderer?: null,
      outSize?: null,
      additionalMetadataURI?: null,
    ): RegisteredRendererEventFilter;
  };

  estimateGas: {
    addressToId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    idIndex(overrides?: CallOverrides): Promise<BigNumber>;

    idToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToId(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    idIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    registerRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
