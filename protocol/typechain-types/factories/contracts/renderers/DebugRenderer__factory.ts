/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type {
  DebugRenderer,
  DebugRendererInterface,
} from '../../../contracts/renderers/DebugRenderer';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'propsSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renderAttributeKey',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'renderRaw',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110168061010d6000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c80638da5cb5b116100665780638da5cb5b1461015a57806392348b2214610178578063b0a2f64014610196578063effde6db146101c6578063f2fde38b146101e45761009d565b8062a85d69146100a257806301ffc9a7146100c0578063316df61e146100f057806343c5820c14610120578063715018a614610150575b600080fd5b6100aa610200565b6040516100b79190610bbd565b60405180910390f35b6100da60048036038101906100d59190610928565b610228565b6040516100e79190610b40565b60405180910390f35b61010a60048036038101906101059190610951565b6102a2565b6040516101179190610b5b565b60405180910390f35b61013a60048036038101906101359190610951565b6102b6565b6040516101479190610b5b565b60405180910390f35b61015861035e565b005b6101626103e6565b60405161016f9190610b25565b60405180910390f35b6101806103f5565b60405161018d9190610b5b565b60405180910390f35b6101b060048036038101906101ab9190610951565b610415565b6040516101bd9190610b5b565b60405180910390f35b6101ce61044a565b6040516101db9190610b5b565b60405180910390f35b6101fe60048036038101906101f991906108ff565b610487565b005b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b60007f32ce7999000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029b575061029a8261057f565b5b9050919050565b60606102ae83836102b6565b905092915050565b6060600060405180602001604052806000815250905060005b848490508110156103535781858583818110610314577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b60405160200161032f929190610ad0565b6040516020818303038152906040529150808061034b90610d8d565b9150506102cf565b819250505092915050565b6103666105e9565b73ffffffffffffffffffffffffffffffffffffffff166103846103e6565b73ffffffffffffffffffffffffffffffffffffffff16146103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190610b9d565b60405180910390fd5b6103e460006105f1565b565b60006103f06106b5565b905090565b6060604051806080016040528060428152602001610f9f60429139905090565b6060610423838390506106de565b6040516020016104339190610af8565b604051602081830303815290604052905092915050565b60606040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250905090565b61048f6105e9565b73ffffffffffffffffffffffffffffffffffffffff166104ad6103e6565b73ffffffffffffffffffffffffffffffffffffffff1614610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90610b9d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90610b7d565b60405180910390fd5b61057c816105f1565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000821415610726576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610886565b600082905060005b6000821461075857808061074190610d8d565b915050600a826107519190610c55565b915061072e565b60008167ffffffffffffffff81111561079a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107cc5781602001600182028036833780820191505090505b5090505b6000851461087f576001826107e59190610c86565b9150600a856107f49190610de0565b60306108009190610bff565b60f81b81838151811061083c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856108789190610c55565b94506107d0565b8093505050505b919050565b60008135905061089a81610f70565b92915050565b6000813590506108af81610f87565b92915050565b60008083601f8401126108c757600080fd5b8235905067ffffffffffffffff8111156108e057600080fd5b6020830191508360018202830111156108f857600080fd5b9250929050565b60006020828403121561091157600080fd5b600061091f8482850161088b565b91505092915050565b60006020828403121561093a57600080fd5b6000610948848285016108a0565b91505092915050565b6000806020838503121561096457600080fd5b600083013567ffffffffffffffff81111561097e57600080fd5b61098a858286016108b5565b92509250509250929050565b61099f81610cba565b82525050565b6109ae81610ccc565b82525050565b6109c56109c082610cd8565b610dd6565b82525050565b60006109d682610bd8565b6109e08185610be3565b93506109f0818560208601610d5a565b6109f981610e6f565b840191505092915050565b6000610a0f82610bd8565b610a198185610bf4565b9350610a29818560208601610d5a565b80840191505092915050565b6000610a42600283610bf4565b9150610a4d82610e80565b600282019050919050565b6000610a65602683610be3565b9150610a7082610ea9565b604082019050919050565b6000610a88602083610be3565b9150610a9382610ef8565b602082019050919050565b6000610aab602683610bf4565b9150610ab682610f21565b602682019050919050565b610aca81610d50565b82525050565b6000610adc8285610a04565b9150610ae882846109b4565b6001820191508190509392505050565b6000610b0382610a9e565b9150610b0f8284610a04565b9150610b1a82610a35565b915081905092915050565b6000602082019050610b3a6000830184610996565b92915050565b6000602082019050610b5560008301846109a5565b92915050565b60006020820190508181036000830152610b7581846109cb565b905092915050565b60006020820190508181036000830152610b9681610a58565b9050919050565b60006020820190508181036000830152610bb681610a7b565b9050919050565b6000602082019050610bd26000830184610ac1565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610c0a82610d50565b9150610c1583610d50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c4a57610c49610e11565b5b828201905092915050565b6000610c6082610d50565b9150610c6b83610d50565b925082610c7b57610c7a610e40565b5b828204905092915050565b6000610c9182610d50565b9150610c9c83610d50565b925082821015610caf57610cae610e11565b5b828203905092915050565b6000610cc582610d30565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610d78578082015181840152602081019050610d5d565b83811115610d87576000848401525b50505050565b6000610d9882610d50565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dcb57610dca610e11565b5b600182019050919050565b6000819050919050565b6000610deb82610d50565b9150610df683610d50565b925082610e0657610e05610e40565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a0000000000000000000000000000000000000000000000000000602082015250565b610f7981610cba565b8114610f8457600080fd5b50565b610f9081610d04565b8114610f9b57600080fd5b5056fe697066733a2f2f6261666b726569687233367178746572727374676c7263666c67323536636764336b6937616b76716e3633336d33746d6f7562677061706a736e75a2646970667358221220444bdcf6ec9407a1ce2d0c3478da4e9852c530b365aea1b58159236bd251f6ff64736f6c63430008040033';

type DebugRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugRendererConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugRenderer__factory extends ContractFactory {
  constructor(...args: DebugRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<DebugRenderer> {
    return super.deploy(overrides || {}) as Promise<DebugRenderer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugRenderer {
    return super.attach(address) as DebugRenderer;
  }
  override connect(signer: Signer): DebugRenderer__factory {
    return super.connect(signer) as DebugRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugRendererInterface {
    return new utils.Interface(_abi) as DebugRendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DebugRenderer {
    return new Contract(address, _abi, signerOrProvider) as DebugRenderer;
  }
}
