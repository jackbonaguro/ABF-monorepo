/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type {
  DebugRenderer,
  DebugRendererInterface,
} from '../../../contracts/renderers/DebugRenderer';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'outSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renderAttributeKey',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'renderRaw',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bdd806100606000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461013b57806392348b2214610159578063b0a2f64014610177578063effde6db146101a757610088565b806301ffc9a71461008d578063316df61e146100bd578063403e4cdb146100ed57806343c5820c1461010b575b600080fd5b6100a760048036038101906100a29190610646565b6101c5565b6040516100b49190610818565b60405180910390f35b6100d760048036038101906100d2919061066f565b61023f565b6040516100e49190610833565b60405180910390f35b6100f5610253565b6040516101029190610855565b60405180910390f35b6101256004803603810190610120919061066f565b61027b565b6040516101329190610833565b60405180910390f35b610143610323565b60405161015091906107fd565b60405180910390f35b610161610347565b60405161016e9190610833565b60405180910390f35b610191600480360381019061018c919061066f565b61035e565b60405161019e9190610833565b60405180910390f35b6101af610393565b6040516101bc9190610833565b60405180910390f35b60007f7258682b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102385750610237826103d0565b5b9050919050565b606061024b838361027b565b905092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b6060600060405180602001604052806000815250905060005b8484905081101561031857818585838181106102d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b6040516020016102f49291906107a8565b6040516020818303038152906040529150808061031090610a25565b915050610294565b819250505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060405180602001604052806000815250905090565b606061036c8383905061043a565b60405160200161037c91906107d0565b604051602081830303815290604052905092915050565b60606040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000821415610482576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506105e2565b600082905060005b600082146104b457808061049d90610a25565b915050600a826104ad91906108ed565b915061048a565b60008167ffffffffffffffff8111156104f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156105285781602001600182028036833780820191505090505b5090505b600085146105db57600182610541919061091e565b9150600a856105509190610a78565b603061055c9190610897565b60f81b818381518110610598577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856105d491906108ed565b945061052c565b8093505050505b919050565b6000813590506105f681610b90565b92915050565b60008083601f84011261060e57600080fd5b8235905067ffffffffffffffff81111561062757600080fd5b60208301915083600182028301111561063f57600080fd5b9250929050565b60006020828403121561065857600080fd5b6000610666848285016105e7565b91505092915050565b6000806020838503121561068257600080fd5b600083013567ffffffffffffffff81111561069c57600080fd5b6106a8858286016105fc565b92509250509250929050565b6106bd81610952565b82525050565b6106cc81610964565b82525050565b6106e36106de82610970565b610a6e565b82525050565b60006106f482610870565b6106fe818561087b565b935061070e8185602086016109f2565b61071781610b07565b840191505092915050565b600061072d82610870565b610737818561088c565b93506107478185602086016109f2565b80840191505092915050565b600061076060028361088c565b915061076b82610b18565b600282019050919050565b600061078360268361088c565b915061078e82610b41565b602682019050919050565b6107a2816109e8565b82525050565b60006107b48285610722565b91506107c082846106d2565b6001820191508190509392505050565b60006107db82610776565b91506107e78284610722565b91506107f282610753565b915081905092915050565b600060208201905061081260008301846106b4565b92915050565b600060208201905061082d60008301846106c3565b92915050565b6000602082019050818103600083015261084d81846106e9565b905092915050565b600060208201905061086a6000830184610799565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006108a2826109e8565b91506108ad836109e8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108e2576108e1610aa9565b5b828201905092915050565b60006108f8826109e8565b9150610903836109e8565b92508261091357610912610ad8565b5b828204905092915050565b6000610929826109e8565b9150610934836109e8565b92508282101561094757610946610aa9565b5b828203905092915050565b600061095d826109c8565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610a105780820151818401526020810190506109f5565b83811115610a1f576000848401525b50505050565b6000610a30826109e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a6357610a62610aa9565b5b600182019050919050565b6000819050919050565b6000610a83826109e8565b9150610a8e836109e8565b925082610a9e57610a9d610ad8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a0000000000000000000000000000000000000000000000000000602082015250565b610b998161099c565b8114610ba457600080fd5b5056fea2646970667358221220e8e054cae0c3997c87706198f0887166413c970b5eeb01064bbbc534c46a85ca64736f6c63430008040033';

type DebugRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugRendererConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugRenderer__factory extends ContractFactory {
  constructor(...args: DebugRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<DebugRenderer> {
    return super.deploy(overrides || {}) as Promise<DebugRenderer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugRenderer {
    return super.attach(address) as DebugRenderer;
  }
  override connect(signer: Signer): DebugRenderer__factory {
    return super.connect(signer) as DebugRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugRendererInterface {
    return new utils.Interface(_abi) as DebugRendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DebugRenderer {
    return new Contract(address, _abi, signerOrProvider) as DebugRenderer;
  }
}
