/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type { PromiseOrValue } from '../../../common';
import type {
  DebugRenderer,
  DebugRendererInterface,
} from '../../../contracts/renderers/DebugRenderer';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'debug',
    outputs: [
      {
        internalType: 'bytes4',
        name: '',
        type: 'bytes4',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'propsSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renderAttributeKey',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'props',
        type: 'bytes',
      },
    ],
    name: 'renderRaw',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6110278061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c8063715018a611610071578063715018a6146101795780638da5cb5b1461018357806392348b22146101a1578063b0a2f640146101bf578063effde6db146101ef578063f2fde38b1461020d576100a8565b8062a85d69146100ad57806301ffc9a7146100cb578063316df61e146100fb57806343c5820c1461012b578063588ee29b1461015b575b600080fd5b6100b5610229565b6040516100c29190610bce565b60405180910390f35b6100e560048036038101906100e0919061090f565b610251565b6040516100f29190610b36565b60405180910390f35b61011560048036038101906101109190610938565b6102cb565b6040516101229190610b6c565b60405180910390f35b61014560048036038101906101409190610938565b6102df565b6040516101529190610b6c565b60405180910390f35b610163610387565b6040516101709190610b51565b60405180910390f35b6101816103af565b005b61018b6103c3565b6040516101989190610b1b565b60405180910390f35b6101a96103d2565b6040516101b69190610b6c565b60405180910390f35b6101d960048036038101906101d49190610938565b6103f2565b6040516101e69190610b6c565b60405180910390f35b6101f7610427565b6040516102049190610b6c565b60405180910390f35b610227600480360381019061022291906108e6565b610464565b005b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b60007f32ce7999000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102c457506102c3826104e8565b5b9050919050565b60606102d783836102df565b905092915050565b6060600060405180602001604052806000815250905060005b8484905081101561037c578185858381811061033d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b604051602001610358929190610ac6565b6040516020818303038152906040529150808061037490610d9e565b9150506102f8565b819250505092915050565b60007f32ce799900000000000000000000000000000000000000000000000000000000905090565b6103b7610552565b6103c160006105d0565b565b60006103cd610694565b905090565b6060604051806080016040528060428152602001610fb060429139905090565b6060610400838390506106bd565b6040516020016104109190610aee565b604051602081830303815290604052905092915050565b60606040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250905090565b61046c610552565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610b8e565b60405180910390fd5b6104e5816105d0565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61055a61086a565b73ffffffffffffffffffffffffffffffffffffffff166105786103c3565b73ffffffffffffffffffffffffffffffffffffffff16146105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c590610bae565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000821415610705576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610865565b600082905060005b6000821461073757808061072090610d9e565b915050600a826107309190610c66565b915061070d565b60008167ffffffffffffffff811115610779577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107ab5781602001600182028036833780820191505090505b5090505b6000851461085e576001826107c49190610c97565b9150600a856107d39190610df1565b60306107df9190610c10565b60f81b81838151811061081b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856108579190610c66565b94506107af565b8093505050505b919050565b600033905090565b60008135905061088181610f81565b92915050565b60008135905061089681610f98565b92915050565b60008083601f8401126108ae57600080fd5b8235905067ffffffffffffffff8111156108c757600080fd5b6020830191508360018202830111156108df57600080fd5b9250929050565b6000602082840312156108f857600080fd5b600061090684828501610872565b91505092915050565b60006020828403121561092157600080fd5b600061092f84828501610887565b91505092915050565b6000806020838503121561094b57600080fd5b600083013567ffffffffffffffff81111561096557600080fd5b6109718582860161089c565b92509250509250929050565b61098681610ccb565b82525050565b61099581610cdd565b82525050565b6109ac6109a782610ce9565b610de7565b82525050565b6109bb81610d15565b82525050565b60006109cc82610be9565b6109d68185610bf4565b93506109e6818560208601610d6b565b6109ef81610e80565b840191505092915050565b6000610a0582610be9565b610a0f8185610c05565b9350610a1f818560208601610d6b565b80840191505092915050565b6000610a38600283610c05565b9150610a4382610e91565b600282019050919050565b6000610a5b602683610bf4565b9150610a6682610eba565b604082019050919050565b6000610a7e602083610bf4565b9150610a8982610f09565b602082019050919050565b6000610aa1602683610c05565b9150610aac82610f32565b602682019050919050565b610ac081610d61565b82525050565b6000610ad282856109fa565b9150610ade828461099b565b6001820191508190509392505050565b6000610af982610a94565b9150610b0582846109fa565b9150610b1082610a2b565b915081905092915050565b6000602082019050610b30600083018461097d565b92915050565b6000602082019050610b4b600083018461098c565b92915050565b6000602082019050610b6660008301846109b2565b92915050565b60006020820190508181036000830152610b8681846109c1565b905092915050565b60006020820190508181036000830152610ba781610a4e565b9050919050565b60006020820190508181036000830152610bc781610a71565b9050919050565b6000602082019050610be36000830184610ab7565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610c1b82610d61565b9150610c2683610d61565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c5b57610c5a610e22565b5b828201905092915050565b6000610c7182610d61565b9150610c7c83610d61565b925082610c8c57610c8b610e51565b5b828204905092915050565b6000610ca282610d61565b9150610cad83610d61565b925082821015610cc057610cbf610e22565b5b828203905092915050565b6000610cd682610d41565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610d89578082015181840152602081019050610d6e565b83811115610d98576000848401525b50505050565b6000610da982610d61565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ddc57610ddb610e22565b5b600182019050919050565b6000819050919050565b6000610dfc82610d61565b9150610e0783610d61565b925082610e1757610e16610e51565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a0000000000000000000000000000000000000000000000000000602082015250565b610f8a81610ccb565b8114610f9557600080fd5b50565b610fa181610d15565b8114610fac57600080fd5b5056fe697066733a2f2f6261666b726569616f7763623676717472727076676c646968723663626234766c6578726868786f636e79683266656c377134666b753761727575a26469706673582212204451d0f21bfb91405281818478d728407bd377b853f4ce6fb096cfb3dc83c6c564736f6c63430008040033';

type DebugRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugRendererConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugRenderer__factory extends ContractFactory {
  constructor(...args: DebugRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<DebugRenderer> {
    return super.deploy(overrides || {}) as Promise<DebugRenderer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugRenderer {
    return super.attach(address) as DebugRenderer;
  }
  override connect(signer: Signer): DebugRenderer__factory {
    return super.connect(signer) as DebugRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugRendererInterface {
    return new utils.Interface(_abi) as DebugRendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DebugRenderer {
    return new Contract(address, _abi, signerOrProvider) as DebugRenderer;
  }
}
