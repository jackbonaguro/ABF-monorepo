/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers';
import type {
  PathRenderer,
  PathRendererInterface,
} from '../../../contracts/renderers/PathRenderer';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'outSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renderAttributeKey',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'renderRaw',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113c7806100606000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461013b57806392348b2214610159578063b0a2f64014610177578063effde6db146101a757610088565b806301ffc9a71461008d578063316df61e146100bd578063403e4cdb146100ed57806343c5820c1461010b575b600080fd5b6100a760048036038101906100a29190610b29565b6101c5565b6040516100b49190610e06565b60405180910390f35b6100d760048036038101906100d29190610b52565b61023f565b6040516100e49190610e21565b60405180910390f35b6100f561027a565b6040516101029190610e43565b60405180910390f35b61012560048036038101906101209190610b52565b6102a2565b6040516101329190610e21565b60405180910390f35b610143610670565b6040516101509190610deb565b60405180910390f35b610161610694565b60405161016e9190610e21565b60405180910390f35b610191600480360381019061018c9190610b52565b6106ab565b60405161019e9190610e21565b60405180910390f35b6101af6106ec565b6040516101bc9190610e21565b60405180910390f35b60007f7258682b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610238575061023782610729565b5b9050919050565b606061025361024e84846102a2565b610793565b6040516020016102639190610dc9565b604051602081830303815290604052905092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905090565b6060600060405180602001604052806000815250905060005b8484905060026003836102ce9190610f0c565b6102d89190610e85565b101561064657604c60f81b85856003846102f29190610f0c565b818110610328577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103d35750604d60f81b858560038461036f9190610f0c565b8181106103a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104515750606c60f81b85856003846103ed9190610f0c565b818110610423577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104cf5750606d60f81b858560038461046b9190610f0c565b8181106104a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15610633578185856003846104e49190610f0c565b81811061051a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b61059960108888600160038861053a9190610f0c565b6105449190610e85565b81811061057a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b60f81c60ff166105949190610e85565b61091d565b61060e6010898960026003896105af9190610f0c565b6105b99190610e85565b8181106105ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b60f81c60ff166106099190610e85565b61091d565b6040516020016106219493929190610d17565b60405160208183030381529060405291505b808061063e9061106d565b9150506102bb565b816040516020016106579190610d6f565b6040516020818303038152906040529250505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060405180602001604052806000815250905090565b60606106c56003848490506106c09190610edb565b61091d565b6040516020016106d59190610d9c565b604051602081830303815290604052905092915050565b60606040518060400160405280600581526020017f696d616765000000000000000000000000000000000000000000000000000000815250905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60606000825114156107b657604051806020016040528060008152509050610918565b600060405180606001604052806040815260200161135260409139905060006003600285516107e59190610e85565b6107ef9190610edb565b60046107fb9190610f0c565b67ffffffffffffffff81111561083a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561086c5781602001600182028036833780820191505090505b509050600182016020820185865187015b808210156108d8576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184536001840193505061087d565b50506003865106600181146108f457600281146109075761090f565b603d6001830353603d600283035361090f565b603d60018303535b50505080925050505b919050565b60606000821415610965576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ac5565b600082905060005b600082146109975780806109809061106d565b915050600a826109909190610edb565b915061096d565b60008167ffffffffffffffff8111156109d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610a0b5781602001600182028036833780820191505090505b5090505b60008514610abe57600182610a249190610f66565b9150600a85610a3391906110c0565b6030610a3f9190610e85565b60f81b818381518110610a7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610ab79190610edb565b9450610a0f565b8093505050505b919050565b600081359050610ad98161133a565b92915050565b60008083601f840112610af157600080fd5b8235905067ffffffffffffffff811115610b0a57600080fd5b602083019150836001820283011115610b2257600080fd5b9250929050565b600060208284031215610b3b57600080fd5b6000610b4984828501610aca565b91505092915050565b60008060208385031215610b6557600080fd5b600083013567ffffffffffffffff811115610b7f57600080fd5b610b8b85828601610adf565b92509250509250929050565b610ba081610f9a565b82525050565b610baf81610fac565b82525050565b610bc6610bc182610fb8565b6110b6565b82525050565b6000610bd782610e5e565b610be18185610e69565b9350610bf181856020860161103a565b610bfa8161114f565b840191505092915050565b6000610c1082610e5e565b610c1a8185610e7a565b9350610c2a81856020860161103a565b80840191505092915050565b6000610c43600283610e7a565b9150610c4e82611160565b600282019050919050565b6000610c6660c083610e7a565b9150610c7182611189565b60c082019050919050565b6000610c89600183610e7a565b9150610c9482611270565b600182019050919050565b6000610cac600b83610e7a565b9150610cb782611299565b600b82019050919050565b6000610ccf602683610e7a565b9150610cda826112c2565b602682019050919050565b6000610cf2601a83610e7a565b9150610cfd82611311565b601a82019050919050565b610d1181611030565b82525050565b6000610d238287610c05565b9150610d2e82610c7c565b9150610d3a8286610bb5565b600182019150610d4a8285610c05565b9150610d5582610c7c565b9150610d618284610c05565b915081905095945050505050565b6000610d7a82610c59565b9150610d868284610c05565b9150610d9182610c9f565b915081905092915050565b6000610da782610cc2565b9150610db38284610c05565b9150610dbe82610c36565b915081905092915050565b6000610dd482610ce5565b9150610de08284610c05565b915081905092915050565b6000602082019050610e006000830184610b97565b92915050565b6000602082019050610e1b6000830184610ba6565b92915050565b60006020820190508181036000830152610e3b8184610bcc565b905092915050565b6000602082019050610e586000830184610d08565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610e9082611030565b9150610e9b83611030565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ed057610ecf6110f1565b5b828201905092915050565b6000610ee682611030565b9150610ef183611030565b925082610f0157610f00611120565b5b828204905092915050565b6000610f1782611030565b9150610f2283611030565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f5b57610f5a6110f1565b5b828202905092915050565b6000610f7182611030565b9150610f7c83611030565b925082821015610f8f57610f8e6110f1565b5b828203905092915050565b6000610fa582611010565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561105857808201518184015260208101905061103d565b83811115611067576000848401525b50505050565b600061107882611030565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110ab576110aa6110f1565b5b600182019050919050565b6000819050919050565b60006110cb82611030565b91506110d683611030565b9250826110e6576110e5611120565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222077696474683d2232383822206865696768743d223238382260208201527f207374796c653d226261636b67726f756e643a23463146314631223e3c70617460408201527f682066696c6c3d226e6f6e6522207374726f6b653d22626c61636b222073747260608201527f6f6b652d77696474683d223222207374726f6b652d6c696e656361703d22726f60808201527f756e6422207374726f6b652d6c696e656a6f696e3d22726f756e642220643d2260a082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f22202f3e203c2f7376673e000000000000000000000000000000000000000000600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a0000000000000000000000000000000000000000000000000000602082015250565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b61134381610fe4565b811461134e57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202c7af59bcf8ee0f537ac0855ef098fa7e98218892002a175124bedd5f947910c64736f6c63430008040033';

type PathRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PathRendererConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PathRenderer__factory extends ContractFactory {
  constructor(...args: PathRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<PathRenderer> {
    return super.deploy(overrides || {}) as Promise<PathRenderer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PathRenderer {
    return super.attach(address) as PathRenderer;
  }
  override connect(signer: Signer): PathRenderer__factory {
    return super.connect(signer) as PathRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PathRendererInterface {
    return new utils.Interface(_abi) as PathRendererInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): PathRenderer {
    return new Contract(address, _abi, signerOrProvider) as PathRenderer;
  }
}
