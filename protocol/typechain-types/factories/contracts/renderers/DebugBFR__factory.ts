/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  DebugBFR,
  DebugBFRInterface,
} from '../../../contracts/renderers/DebugBFR';

const _abi = [
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'outSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506109c8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306fdde031461005c578063316df61e1461007a578063403e4cdb146100aa57806392348b22146100c8578063b0a2f640146100e6575b600080fd5b610064610116565b604051610071919061069f565b60405180910390f35b610094600480360381019061008f919061052f565b610153565b6040516100a1919061069f565b60405180910390f35b6100b261025f565b6040516100bf91906106c1565b60405180910390f35b6100d0610269565b6040516100dd919061069f565b60405180910390f35b61010060048036038101906100fb919061052f565b610280565b60405161010d919061069f565b60405180910390f35b60606040518060400160405280600581526020017f4445425547000000000000000000000000000000000000000000000000000000815250905090565b6060600060405180602001604052806000815250905060005b600060f81b8585838181106101aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146102545781858583818110610215577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b60405160200161023092919061064a565b6040516020818303038152906040529150808061024c90610827565b91505061016c565b819250505092915050565b6000610100905090565b606060405180602001604052806000815250905090565b606060005b600060f81b8484838181106102c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146103075780806102ff90610827565b915050610285565b61031081610338565b6040516020016103209190610672565b60405160208183030381529060405291505092915050565b60606000821415610380576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506104e0565b600082905060005b600082146103b257808061039b90610827565b915050600a826103ab9190610759565b9150610388565b60008167ffffffffffffffff8111156103f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104265781602001600182028036833780820191505090505b5090505b600085146104d95760018261043f919061078a565b9150600a8561044e919061087a565b603061045a9190610703565b60f81b818381518110610496577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856104d29190610759565b945061042a565b8093505050505b919050565b60008083601f8401126104f757600080fd5b8235905067ffffffffffffffff81111561051057600080fd5b60208301915083600182028301111561052857600080fd5b9250929050565b6000806020838503121561054257600080fd5b600083013567ffffffffffffffff81111561055c57600080fd5b610568858286016104e5565b92509250509250929050565b610585610580826107be565b610870565b82525050565b6000610596826106dc565b6105a081856106e7565b93506105b08185602086016107f4565b6105b981610909565b840191505092915050565b60006105cf826106dc565b6105d981856106f8565b93506105e98185602086016107f4565b80840191505092915050565b60006106026002836106f8565b915061060d8261091a565b600282019050919050565b60006106256026836106f8565b915061063082610943565b602682019050919050565b610644816107ea565b82525050565b600061065682856105c4565b91506106628284610574565b6001820191508190509392505050565b600061067d82610618565b915061068982846105c4565b9150610694826105f5565b915081905092915050565b600060208201905081810360008301526106b9818461058b565b905092915050565b60006020820190506106d6600083018461063b565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061070e826107ea565b9150610719836107ea565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561074e5761074d6108ab565b5b828201905092915050565b6000610764826107ea565b915061076f836107ea565b92508261077f5761077e6108da565b5b828204905092915050565b6000610795826107ea565b91506107a0836107ea565b9250828210156107b3576107b26108ab565b5b828203905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60005b838110156108125780820151818401526020810190506107f7565b83811115610821576000848401525b50505050565b6000610832826107ea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610865576108646108ab565b5b600182019050919050565b6000819050919050565b6000610885826107ea565b9150610890836107ea565b9250826108a05761089f6108da565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a000000000000000000000000000000000000000000000000000060208201525056fea264697066735822122069ee4e2410a167267b01e656e19054e78b614bc2f4901390da67fb8619961e6464736f6c63430008040033';

type DebugBFRConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugBFRConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugBFR__factory extends ContractFactory {
  constructor(...args: DebugBFRConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<DebugBFR> {
    return super.deploy(overrides || {}) as Promise<DebugBFR>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugBFR {
    return super.attach(address) as DebugBFR;
  }
  override connect(signer: Signer): DebugBFR__factory {
    return super.connect(signer) as DebugBFR__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugBFRInterface {
    return new utils.Interface(_abi) as DebugBFRInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DebugBFR {
    return new Contract(address, _abi, signerOrProvider) as DebugBFR;
  }
}
