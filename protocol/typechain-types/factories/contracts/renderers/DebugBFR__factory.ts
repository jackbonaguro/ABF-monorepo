/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  DebugBFR,
  DebugBFRInterface,
} from '../../../contracts/renderers/DebugBFR';

const _abi = [
  {
    inputs: [],
    name: 'additionalMetadataURI',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'attributes',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'outSize',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'render',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'out',
        type: 'bytes',
      },
    ],
    name: 'renderRaw',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50610a17806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde0314610067578063316df61e14610085578063403e4cdb146100b557806343c5820c146100d357806392348b2214610103578063b0a2f64014610121575b600080fd5b61006f610151565b60405161007c91906106ee565b60405180910390f35b61009f600480360381019061009a919061057e565b61018e565b6040516100ac91906106ee565b60405180910390f35b6100bd6101a2565b6040516100ca9190610710565b60405180910390f35b6100ed60048036038101906100e8919061057e565b6101ac565b6040516100fa91906106ee565b60405180910390f35b61010b6102b8565b60405161011891906106ee565b60405180910390f35b61013b6004803603810190610136919061057e565b6102cf565b60405161014891906106ee565b60405180910390f35b60606040518060400160405280600581526020017f4445425547000000000000000000000000000000000000000000000000000000815250905090565b606061019a83836101ac565b905092915050565b6000610100905090565b6060600060405180602001604052806000815250905060005b600060f81b858583818110610203577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146102ad578185858381811061026e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b604051602001610289929190610699565b604051602081830303815290604052915080806102a590610876565b9150506101c5565b819250505092915050565b606060405180602001604052806000815250905090565b606060005b600060f81b848483818110610312577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461035657808061034e90610876565b9150506102d4565b61035f81610387565b60405160200161036f91906106c1565b60405160208183030381529060405291505092915050565b606060008214156103cf576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061052f565b600082905060005b600082146104015780806103ea90610876565b915050600a826103fa91906107a8565b91506103d7565b60008167ffffffffffffffff811115610443577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156104755781602001600182028036833780820191505090505b5090505b600085146105285760018261048e91906107d9565b9150600a8561049d91906108c9565b60306104a99190610752565b60f81b8183815181106104e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561052191906107a8565b9450610479565b8093505050505b919050565b60008083601f84011261054657600080fd5b8235905067ffffffffffffffff81111561055f57600080fd5b60208301915083600182028301111561057757600080fd5b9250929050565b6000806020838503121561059157600080fd5b600083013567ffffffffffffffff8111156105ab57600080fd5b6105b785828601610534565b92509250509250929050565b6105d46105cf8261080d565b6108bf565b82525050565b60006105e58261072b565b6105ef8185610736565b93506105ff818560208601610843565b61060881610958565b840191505092915050565b600061061e8261072b565b6106288185610747565b9350610638818560208601610843565b80840191505092915050565b6000610651600283610747565b915061065c82610969565b600282019050919050565b6000610674602683610747565b915061067f82610992565b602682019050919050565b61069381610839565b82525050565b60006106a58285610613565b91506106b182846105c3565b6001820191508190509392505050565b60006106cc82610667565b91506106d88284610613565b91506106e382610644565b915081905092915050565b6000602082019050818103600083015261070881846105da565b905092915050565b6000602082019050610725600083018461068a565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061075d82610839565b915061076883610839565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561079d5761079c6108fa565b5b828201905092915050565b60006107b382610839565b91506107be83610839565b9250826107ce576107cd610929565b5b828204905092915050565b60006107e482610839565b91506107ef83610839565b925082821015610802576108016108fa565b5b828203905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60005b83811015610861578082015181840152602081019050610846565b83811115610870576000848401525b50505050565b600061088182610839565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156108b4576108b36108fa565b5b600182019050919050565b6000819050919050565b60006108d482610839565b91506108df83610839565b9250826108ef576108ee610929565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b7f7b2274726169745f74797065223a202244617461204c656e677468222c20227660008201527f616c7565223a000000000000000000000000000000000000000000000000000060208201525056fea2646970667358221220cbdea2bbd45c38118f43be5e4603ac13a28d526172611c83cfdedfcff9a00bec64736f6c63430008040033';

type DebugBFRConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugBFRConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugBFR__factory extends ContractFactory {
  constructor(...args: DebugBFRConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<DebugBFR> {
    return super.deploy(overrides || {}) as Promise<DebugBFR>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugBFR {
    return super.attach(address) as DebugBFR;
  }
  override connect(signer: Signer): DebugBFR__factory {
    return super.connect(signer) as DebugBFR__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugBFRInterface {
    return new utils.Interface(_abi) as DebugBFRInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): DebugBFR {
    return new Contract(address, _abi, signerOrProvider) as DebugBFR;
  }
}
